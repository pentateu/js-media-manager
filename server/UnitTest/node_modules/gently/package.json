{
  "name": "gently",
  "version": "0.9.2",
  "directories": {
    "lib": "./lib/gently"
  },
  "main": "./lib/gently/index",
  "dependencies": {},
  "devDependencies": {},
  "engines": {
    "node": "*"
  },
  "optionalDependencies": {},
  "readme": "# Gently\n\n## Purpose\n\nA node.js module that helps with stubbing and behavior verification. It allows you to test the most remote and nested corners of your code while keeping being fully unobtrusive.\n\n## Features\n\n* Overwrite and stub individual object functions\n* Verify that all expected calls have been made in the expected order\n* Restore stubbed functions to their original behavior\n* Detect object / class names from obj.constructor.name and obj.toString()\n* Hijack any required module function or class constructor\n\n## Installation\n\nVia [npm](http://github.com/isaacs/npm):\n\n    npm install gently@latest\n\n## Example\n\nMake sure your dog is working properly:\n\n    function Dog() {}\n\n    Dog.prototype.seeCat = function() {\n      this.bark('whuf, whuf');\n      this.run();\n    }\n\n    Dog.prototype.bark = function(bark) {\n      require('sys').puts(bark);\n    }\n\n    var gently = new (require('gently'))\n      , assert = require('assert')\n      , dog = new Dog();\n\n    gently.expect(dog, 'bark', function(bark) {\n      assert.equal(bark, 'whuf, whuf');\n    });\n    gently.expect(dog, 'run');\n\n    dog.seeCat();\n\nYou can also easily test event emitters with this, for example a simple sequence of 2 events emitted by `fs.WriteStream`:\n\n    var gently = new (require('gently'))\n      , stream = new (require('fs').WriteStream)('my_file.txt');\n\n    gently.expect(stream, 'emit', function(event) {\n      assert.equal(event, 'open');\n    });\n\n    gently.expect(stream, 'emit', function(event) {\n      assert.equal(event, 'drain');\n    });\n\nFor a full read world example, check out this test case: [test-incoming-form.js](http://github.com/felixge/node-formidable/blob/master/test/simple/test-incoming-form.js) (in [node-formdiable](http://github.com/felixge/node-formidable)).\n\n## API\n\n### Gently\n\n#### new Gently()\n\nCreates a new gently instance. It listens to the process `'exit'` event to make sure all expectations have been verified.\n\n#### gently.expect(obj, method, [[count], stubFn])\n\nCreates an expectation for an objects method to be called. You can optionally specify the call `count` you are expecting, as well as `stubFn` function that will run instead of the original function.\n\nReturns a reference to the function that is getting overwritten.\n\n#### gently.expect([count], stubFn)\n\nReturns a function that is supposed to be executed `count` times, delegating any calls to the provided `stubFn` function. Naming your stubFn closure will help to properly diagnose errors that are being thrown:\n\n    childProcess.exec('ls', gently.expect(function lsCallback(code) {\n      assert.equal(0, code);\n    }));\n\n#### gently.restore(obj, method)\n\nRestores an object method that has been previously overwritten using `gently.expect()`.\n\n#### gently.hijack(realRequire)\n\nReturns a new require functions that catches a reference to all required modules into `gently.hijacked`.\n\nTo use this function, include a line like this in your `'my-module.js'`.\n\n    if (global.GENTLY) require = GENTLY.hijack(require);\n\n    var sys = require('sys');\n    exports.hello = function() {\n      sys.log('world');\n    };\n\nNow you can write a test for the module above:\n\n    var gently = global.GENTLY = new (require('gently'))\n      , myModule = require('./my-module');\n\n    gently.expect(gently.hijacked.sys, 'log', function(str) {\n      assert.equal(str, 'world');\n    });\n\n    myModule.hello();\n\n#### gently.stub(location, [exportsName])\n\nReturns a stub class that will be used instead of the real class from the module at `location` with the given `exportsName`.\n\nThis allows to test an OOP version of the previous example, where `'my-module.js'`.\n\n    if (global.GENTLY) require = GENTLY.hijack(require);\n\n    var World = require('./world');\n\n    exports.hello = function() {\n      var world = new World();\n      world.hello();\n    }\n\nAnd `world.js` looks like this:\n\n    var sys = require('sys');\n\n    function World() {\n\n    }\n    module.exports = World;\n\n    World.prototype.hello = function() {\n      sys.log('world');\n    };\n\nTesting `'my-module.js'` can now easily be accomplished:\n\n    var gently = global.GENTLY = new (require('gently'))\n      , WorldStub = gently.stub('./world')\n      , myModule = require('./my-module')\n      , WORLD;\n\n    gently.expect(WorldStub, 'new', function() {\n      WORLD = this;\n    });\n\n    gently.expect(WORLD, 'hello');\n\n    myModule.hello();\n\n#### gently.hijacked\n\nAn object that holds the references to all hijacked modules.\n\n#### gently.verify([msg])\n\nVerifies that all expectations of this gently instance have been satisfied. If not called manually, this method is called when the process `'exit'` event is fired.\n\nIf `msg` is given, it will appear in any error that might be thrown.\n\n## License\n\nGently is licensed under the MIT license.",
  "readmeFilename": "Readme.md",
  "_id": "gently@0.9.2",
  "description": "## Purpose",
  "dist": {
    "shasum": "37aa072ba0894274cde5287e13eee8a1ffc2fb58"
  },
  "_from": "gently@latest"
}
