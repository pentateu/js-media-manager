var Promisse 	= require('../promisse');
var util 		= require('../util');
var http		= require('http');

//var jsdom  = require('jsdom');
//var jquery = fs.readFileSync("./jquery-1.8.2.min.js").toString();

var JSON_API_TITLE_SEARCH_URL = "http://www.imdb.com/xml/find?json=1&nr=1&tt=on&q=";

//http://imdbapi.org/?q=The+Expendables+2&type=json&plot=simple&episode=0&limit=2&year=2012&yg=1&mt=none&lang=en-US&offset=
//http://imdbapi.org/?q=The+Expendables+2&type=json&plot=simple&episode=0&limit=2&year=2012&yg=1&mt=none&lang=en-US&offset=

var IMDBScraper = module.exports = function(mediaFile) {
	//make sure it behaves as a constructor
	if ( ! (this instanceof IMDBScraper) ) {
		return new IMDBScraper(mediaFile);
	}

	
	var buildInfo = this.buildInfo = function(info, imdbObj){

		//sampleimdb obj: 
		//{ "id":"tt0976247", "title":"Surfer, Dude", "name":"","title_description":"2008, S.R. Bindler",
		//"episode_title":"","description":"2008, S.R. Bindler"}
		
		//sample info
		//{"title":"The Campaign","watched":"false","imdb":{"title":"The Campaign","year":"2012","id":"tt1790886","rating":"6.2"}}
		info.title = imdbObj.title;
		info.watched = false;

		info.imdb = {
			id:imdbObj.id,
			title:imdbObj.title
		};

	};

	var processList = this.processList = function(info, list){
		//check how many exact matches
		if(list.length == 1){
			//only one exact match, so no candidates
			buildInfo(info, list[0]);
		}
		else{
			//multiple matches
			//turn into a collection
			util.asCollection(list);

			list.forEach(function(item){
				//for each found
				if(info.candidates){
					//from the second - add as candidates
					var candidate = {};
					buildInfo(candidate, item);
					info.candidates.push(candidate);
				}
				else{
					//add the first as the info
					buildInfo(info, item);
					info.candidates = new Array();
				}
			});
		}
	};

	//Function that process the IMDB search result and return a media indo object
	var processSearchResult = this.processSearchResult = function(imdbResult){

		var info = {};

		//1: check if there is a title_exact match property
		if(imdbResult.title_exact && imdbResult.title_exact.length > 0){
			processList(info, imdbResult.title_exact);
		}
		else if(imdbResult.title_popular && imdbResult.title_popular.length > 0){
			processList(info, imdbResult.title_popular);
		}
		else{
			return null;
		}

		return info;
	};

	//perform a search
	var search = this.search = function(retries){
		var p = new Promisse();

		if(!retries){
			retries = 0;
		}

		//create the query
		var query = mediaFile.title.replace(/\s/g,'+');
		if(mediaFile.year){
			query += '+' + mediaFile.year;
		}
		console.log('quering iMDB with the following query: ' + query);

		var imdbResult = null;

		//query iMDB
		http.get(JSON_API_TITLE_SEARCH_URL + query, function(res) {
			console.log('STATUS: ' + res.statusCode);
		  	//console.log('HEADERS: ' + JSON.stringify(res.headers));

		  	res.setEncoding('utf8');

		  	var content = "";

			//receive data
			res.on('data', function (chunk) {
				content += chunk;
			});

			res.on('close', function () {
				//check if the end event has already been called
				if(imdbResult){
					//nothing to worry about, the end has been called and the imdbResult has been parsed correctly
				}
				else{
					//shiiiit .. 
					//check the number of retries
					if(retries >= LIMIT_RETRIES){
						p.reject(ERROR_IMDB_CLOSE_RESPONSE.error());
					}
					else{
						console.log('response closed, trying again!');
						//retry again
						search(retries++);
					}
				}
			});

			//all data received
			res.on('end', function () {
				//console.log('end event content: ' + content);
				//transforma o content me JSON object
				imdbResult = JSON.parse(content);
				p.resolve(processSearchResult(imdbResult));
			});

		})
		.on('error', function(e) {
			console.log('problem with iMDB request: ' + e.message);
			p.reject(ERROR_IMDB_JSON_SERVICE.cause(e).error());
		});



		/*
		//mock
		p.resolve(
			{
				"title" : "Fake title - from mock imdb scraper",
				"watched" : "false",
				"imdb" : {
					"title" : "Fake title - from mock imdb scraper",
					"year" : "2012",
					"id" : "tt1764651",
					"rating" : "7.1"
				}
			}
		);
		*/

		return p;
	};
};

var LIMIT_RETRIES = IMDBScraper.LIMIT_RETRIES = 3;
//Define exceptions generated by this module
var ERROR_IMDB_JSON_SERVICE = IMDBScraper.ERROR_IMDB_JSON_SERVICE = util.exception({message:"Error Invoking IMDB JSON service."});

var ERROR_IMDB_CLOSE_RESPONSE = IMDBScraper.ERROR_IMDB_CLOSE_RESPONSE = util.exception({message:"Response has closed before the complete payload could be received."});

