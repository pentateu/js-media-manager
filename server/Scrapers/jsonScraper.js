var Promisse 	= require('../promisse');
var util 		= require('../util');
var http		= require('http');

/**
 * Scraper object
 */
var JSONScraper = module.exports = function(ScraperImpl) {
	//make sure it behaves as a constructor
	if ( ! (this instanceof JSONScraper) ) {
		return new JSONScraper(ScraperImpl);
	}

	if(typeof ScraperImpl !== "function"){
		//not a constructor function
		throw ERROR_INVALID_SCRAPER_IMPL.error();
	}

	//get the Scrape context
	var context = this;

	//initial mediaFile property is empty
	this.mediaFile = null;

	context.getQuery = function(includeYear){
		try{
			var query = context.mediaFile.title.replace(/\s/g,'+');
			if(context.mediaFile.year && includeYear){
				query += '+' + context.mediaFile.year;
			}
			return query;
		}
		catch(e){
			console.log('error on jsonScraper.getQuery() err: ' + e);
			return '';
		}
	};

	//perform a search
	context.search = function(retries){
		//console.log('JSONScraper.search() invoked.');
		var p = new Promisse();

		//validate parameters before start
		if( ! this.mediaFile){
			p.reject(MEDIA_FILE_NOT_SET);
			return p;
		}
		if( ! scraperInstance.buildURL){
			p.reject(BUILD_URL_FUNC_NOT_SET.error());
			return p;
		}
		if( ! scraperInstance.processSearchResult){
			p.reject(PROCESS_SEARCH_RESULT_FUNC_NOT_SET.error());
			return p;
		}

		//initialize the retries
		if(!retries){
			retries = 0;
		}

		//create the query
		var query = context.getQuery(this.mediaFile, true);
		console.log('jsonScraper search with query: ' + query);

		var jsonResult = null;

		var url = scraperInstance.buildURL(query);
		console.log('jsonScraper search with url: ' + url);

		//query service
		http.get(url, function(res) {
			console.log('STATUS: ' + res.statusCode);
		  	//console.log('HEADERS: ' + JSON.stringify(res.headers));

		  	res.setEncoding('utf8');
		  	var content = "";

			//receive data
			res.on('data', function (chunk) {
				content += chunk;
			});

			res.on('close', function () {
				//check if the end event has already been called
				if(jsonResult){
					//nothing to worry about, the end has been called and the imdbResult has been parsed correctly
				}
				else{
					//shiiiit .. 
					//check the number of retries
					if(retries >= LIMIT_RETRIES){
						p.reject(ERROR_IMDB_CLOSE_RESPONSE.error());
					}
					else{
						console.log('response closed before end of chunk data. trying again!');
						//retry again
						search(retries++);
					}
				}
			});

			//all data received
			res.on('end', function () {
				//console.log('end event content: ' + content);
				//transforma o content me JSON object
				try{
					jsonResult = JSON.parse(content);		
				}
				catch(e){
					p.reject(ERROR_JSON_PARSE.cause(e).error());
				}

				try{
					p.resolve(scraperInstance.processSearchResult(jsonResult));		
				}
				catch(e){
					p.reject(ERROR_PROCESS_SEARCH_RESULT.cause(e).error());
				}
			});

		})
		.on('error', function(e) {
			console.log('problem with request: ' + e.message);
			p.reject(ERROR_JSON_SERVICE.cause(e).error());
		});

		return p;
	};

	//create scraper instance - after the super methods are defined
	var scraperInstance = new ScraperImpl(context);
};

var LIMIT_RETRIES = JSONScraper.LIMIT_RETRIES = 3;

//Define exceptions generated by this module
var ERROR_JSON_SERVICE = JSONScraper.ERROR_JSON_SERVICE = util.exception({message:"Error Invoking JSON service."});
var ERROR_CLOSE_RESPONSE = JSONScraper.ERROR_CLOSE_RESPONSE = util.exception({message:"Response has closed before the complete payload could be received."});

var ERROR_JSON_PARSE = JSONScraper.ERROR_JSON_PARSE = util.exception({message:"Error parsing JSON returned from the service."});

var ERROR_PROCESS_SEARCH_RESULT = JSONScraper.ERROR_PROCESS_SEARCH_RESULT = util.exception({message:"Error processing the search result."});

var MEDIA_FILE_NOT_SET = JSONScraper.MEDIA_FILE_NOT_SET = util.exception({message:"Media file has not been set."});

var BUILD_URL_FUNC_NOT_SET = JSONScraper.BUILD_URL_FUNC_NOT_SET = util.exception({message:"buildURL function does not exists in scraperInstance"});

var PROCESS_SEARCH_RESULT_FUNC_NOT_SET = JSONScraper.PROCESS_SEARCH_RESULT_FUNC_NOT_SET = util.exception({message:"processSearchResult function does not exists in scraperInstance"});

var ERROR_INVALID_SCRAPER_IMPL = JSONScraper.ERROR_INVALID_SCRAPER_IMPL = util.exception({message:"The parameter must be a constructor function and it must follow the Scraper spec!"});